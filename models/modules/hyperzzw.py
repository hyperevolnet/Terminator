import torch
from models.modules import LocalConv

def HyperZZW_G(global_hk, x):
    """
    Global HyperZZW operator for full context interaction.
    
    This function performs a dot product between the global hyper-kernel (global_hk) and the input (x)
    to capture global context information. The global hyper-kernel is generated by a slow network and
    remains fixed after training, while the input x is the hidden activation from the fast network.
    
    Args:
        global_hk (torch.Tensor): Global hyper-kernel generated by the slow network.
        x (torch.Tensor): Input tensor (hidden activation) from the fast network.
        
    Returns:
        torch.Tensor: Global feature map resulting from the dot product interaction.
    """
    global_feat = torch.matmul(global_hk, x)
    return global_feat


class HyperZZW_L(torch.nn.Module):
    """
    Local HyperZZW operator for sliding window-based convolution.
    
    This module performs local context interaction by applying a depth-wise convolution between
    the local hyper-kernel and the input tensor. The local hyper-kernel is generated by a slow
    network conditioned on the input, allowing for context-dependent kernel generation.
    
    Args:
        SlowNetType_L (torch.nn.Module): Type of slow network for generating local hyper-kernels.
        in_channels (int): Number of input channels.
        kernel_size (int): Size of the convolution kernel.
    """
    def __init__(self, SlowNetType_L: torch.nn.Module, in_channels: int, kernel_size: int):
        super().__init__()
        self.slow_net = SlowNetType_L(in_channels=in_channels, out_channels=in_channels, kernel_size=kernel_size)
        self.local_conv = LocalConv(in_channels=in_channels, kernel_size=kernel_size)
        self.fast_bias = torch.nn.Parameter(torch.zeros(1))
    
    def forward(self, x1, x2):
        """
        Forward pass of the local HyperZZW operator.
        
        Args:
            x1 (torch.Tensor): Input tensor used to generate the local hyper-kernel.
            x2 (torch.Tensor): Input tensor to perform the convolution with the local hyper-kernel.
            
        Returns:
            torch.Tensor: Local feature map resulting from the convolution operation.
        """
        local_ctx_hk = self.slow_net(x1)
        local_feat = self.local_conv(local_ctx_hk, x2) + self.fast_bias
        return local_feat
    

def HyperZZW_2E(hk, x):
    """
    HyperZZW operator with two elementwise multiplications.
    
    This function performs two elementwise multiplications between the hyper-kernel (hk) and
    the input tensor (x) to obtain a context-dependent feature map. The first multiplication
    captures the context information, while the second multiplication applies the context-dependent
    weights to the input.
    
    Args:
        hk (torch.Tensor): Hyper-kernel tensor.
        x (torch.Tensor): Input tensor.
        
    Returns:
        torch.Tensor: Context-dependent feature map.
    """
    ctx_hk = x.mul(hk)
    feat = torch.mul(ctx_hk, x)
    return feat